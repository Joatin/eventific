{"version":3,"file":"Command.js","sourceRoot":"","sources":["../../src/Command.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,mCAAkC;AAClC,mDAAkD;AAClD,+BAA0B;AAC1B,yBAA2B;AAE3B,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAE1C;IAAA;IAKA,CAAC;IAAD,sBAAC;AAAD,CAAC,AALD,IAKC;AALqB,0CAAe;AAWrC,IAAM,2BAA2B,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IACpD,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;CACxC,CAAC,CAAC;AAEH,wBAA+B,OAA8B;IAC3D,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,2BAA2B,CAAC,CAAC;IACjD,MAAM,CAAC,UAAsC,KAAQ;QACnD,MAAM;gBAAe,2BAAK;gBAWxB;oBAAY,cAAc;yBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;wBAAd,yBAAc;;oBAA1B,+BACW,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAC7B;oBAXe,aAAO,GAAG,OAAO,CAAC,OAAO,CAAC;;gBAW1C,CAAC;gBAVM,kCAA0B,GAAjC,UAAkC,cAAwB;oBACxD,IAAM,QAAQ,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;oBACnD,QAAQ,CAAC,GAAG,CAAC,EAAC,OAAO,EAAE,eAAM,EAAE,WAAW,EAAE,IAAI,+BAAc,CAAC,eAAK,CAAC,OAAO,CAAI,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,YAAS,CAAC,CAAC,EAAC,CAAC,CAAC;oBACzH,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,CAAC;gBAOH,cAAC;YAAD,CAAC,AAdM,CAAc,KAAK;YACjB,UAAO,GAAG,OAAO,CAAC,OAAQ;eAajC;;IACJ,CAAC,CAAC;AACJ,CAAC;AAnBD,wCAmBC","sourcesContent":["import { CommandMessage } from './CommandMessage';\nimport { EventMessage } from './EventMessage';\nimport { Injector } from './Injector';\nimport { Logger } from './Logger';\nimport { InternalLogger } from './InternalLogger';\nimport chalk from 'chalk';\nimport * as Joi from 'joi';\n\nconst pascalCase = require('pascal-case');\n\nexport abstract class ICommandHandler<T extends object, R extends object> {\n  static _InstantiateCommandHandler: (injector: Injector) => ICommandHandler<any, any>;\n  static Command: string;\n  public readonly command: string;\n  public abstract handle(message: CommandMessage<T>, state: R, version: number): Promise<EventMessage[]>;\n}\n\nexport interface CommandHandlerOptions {\n  command: string;\n}\n\nconst commandHandlerOptionsSchema = Joi.object().keys({\n  command: Joi.string().min(3).required()\n});\n\nexport function CommandHandler(options: CommandHandlerOptions) {\n  Joi.assert(options, commandHandlerOptionsSchema);\n  return <T extends {new(...args: any[]): {}}>(Class: T) => {\n    return class extends Class {\n      static Command = options.command;\n      public readonly command = options.command;\n      static _InstantiateCommandHandler(parentInjector: Injector): ICommandHandler<any, any> {\n        const injector = parentInjector.newChildInjector();\n        injector.set({provide: Logger, useConstant: new InternalLogger(chalk.bgGreen(`${pascalCase(options.command)}Handler`))});\n        return new this(injector);\n      }\n\n      handle: (message: CommandMessage<any>, state: any, version: number) => Promise<EventMessage[]>;\n\n      constructor(...args: any[]) {\n        super(...args[0].args(Class));\n      }\n    };\n  };\n}\n"]}