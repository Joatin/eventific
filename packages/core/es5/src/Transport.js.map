{"version":3,"file":"Transport.js","sourceRoot":"","sources":["../../src/Transport.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA;IAAA;IAMA,CAAC;IAAD,iBAAC;AAAD,CAAC,AAND,IAMC;AANqB,gCAAU;AAYhC,mBAA0B,OAAyB;IACjD,MAAM,CAAC,UAAsC,KAAQ;QACnD,MAAM;gBAAe,2BAAK;gBAAnB;oBAAA,qEAON;oBALC,UAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;gBAKtB,CAAC;gBAHQ,wBAAgB,GAAvB,UAAwB,QAAkB;oBACxC,MAAM,MAAK,IAAI,YAAJ,IAAI,kBAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAC;gBAC1C,CAAC;gBACH,cAAC;YAAD,CAAC,AAPM,CAAc,KAAK;YACjB,OAAI,GAAG,OAAO,CAAC,IAAK;eAM5B;;IACH,CAAC,CAAC;AACJ,CAAC;AAXD,8BAWC","sourcesContent":["import { CommandMessage } from './CommandMessage';\nimport { options } from 'joi';\nimport { Injector } from './Injector';\n\nexport abstract class ITransport {\n  static _CreateTransport: (injector: Injector) => ITransport;\n  static Settings: (settings: any) => { _CreateTransport: (injector: Injector) => ITransport };\n  abstract start(): Promise<void>;\n  onCommand?(handler: (data: CommandMessage) => Promise<void>): void;\n  sendCommand?(data: CommandMessage): Promise<void>;\n}\n\nexport interface TransportOptions {\n  name: string;\n}\n\nexport function Transport(options: TransportOptions) {\n  return <T extends {new(...args: any[]): {}}>(Class: T): T => {\n    return class extends Class {\n      static Name = options.name;\n      name = options.name;\n\n      static _CreateTransport(injector: Injector) {\n        return new this(...injector.args(Class))\n      }\n    }\n  };\n}\n"]}