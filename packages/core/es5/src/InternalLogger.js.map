{"version":3,"file":"InternalLogger.js","sourceRoot":"","sources":["../../src/InternalLogger.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mCAAkC;AAClC,+BAA0B;AAE1B;IAAoC,kCAAM;IAGxC,wBACW,UAAmB;QAD9B,YAGE,iBAAO,SAER;QAJU,gBAAU,GAAV,UAAU,CAAS;QAG5B,KAAI,CAAC,IAAI,GAAG,UAAU,IAAI,EAAE,CAAC;;IAC/B,CAAC;IAEM,4BAAG,GAAV,UAAW,OAAe;QACxB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,8BAAK,GAAZ,UAAa,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC1C,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,aAAa,GAAG,OAAK,IAAI,CAAC,IAAI,MAAG,CAAA;QACnC,CAAC;QACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,GAAG,CAAC,OAAO,CAAC,SAAI,aAAa,SAAI,OAAO,OAAI,CAAC,CAAC;IAC9E,CAAC;IAEM,6BAAI,GAAX,UAAY,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACzC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAK,OAAO,OAAI,CAAC,CAAC;IACnE,CAAC;IAEM,6BAAI,GAAX,UAAY,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACzC,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,aAAa,GAAG,OAAK,IAAI,CAAC,IAAI,MAAG,CAAA;QACnC,CAAC;QACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAI,aAAa,SAAI,OAAO,OAAI,CAAC,CAAC;IAC9E,CAAC;IAEM,gCAAO,GAAd,UAAe,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC5C,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,aAAa,GAAG,OAAK,IAAI,CAAC,IAAI,MAAG,CAAA;QACnC,CAAC;QACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,MAAM,CAAC,SAAS,CAAC,SAAI,aAAa,SAAI,OAAO,OAAI,CAAC,CAAC;IACnF,CAAC;IAEM,8BAAK,GAAZ,UAAa,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC1C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAK,OAAO,OAAI,CAAC,CAAC;IAChE,CAAC;IAEM,8BAAK,GAAZ,UAAa,OAAe;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC1C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAI,eAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAK,OAAO,OAAI,CAAC,CAAC;IAClE,CAAC;IAGM,iCAAQ,GAAf,UAAgB,IAAY;QAC1B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEH,qBAAC;AAAD,CAAC,AAvDD,CAAoC,eAAM,GAuDzC;AAvDY,wCAAc","sourcesContent":["import { Logger } from './Logger';\nimport chalk from 'chalk';\n\nexport class InternalLogger extends Logger {\n  public readonly name: string;\n\n  constructor(\n    readonly loggerName?: string\n  ) {\n    super();\n    this.name = loggerName || '';\n  }\n\n  public raw(message: string): void {\n    process.stdout.write(message + '\\n');\n  }\n\n  public error(message: string, ...meta: any[]): void {\n    let formattedName = '';\n    if(this.name) {\n      formattedName = ` [${this.name}]`\n    }\n    process.stderr.write(`${chalk.red('error')}:${formattedName} ${message}\\n`);\n  }\n\n  public warn(message: string, ...meta: any[]): void {\n    process.stderr.write(`${chalk.redBright('warn')}: ${message}\\n`);\n  }\n\n  public info(message: string, ...meta: any[]): void {\n    let formattedName = '';\n    if(this.name) {\n      formattedName = ` [${this.name}]`\n    }\n    process.stdout.write(`${chalk.cyan('info')}:${formattedName} ${message}\\n`);\n  }\n\n  public verbose(message: string, ...meta: any[]): void {\n    let formattedName = '';\n    if(this.name) {\n      formattedName = ` [${this.name}]`\n    }\n    process.stdout.write(`${chalk.yellow('verbose')}:${formattedName} ${message}\\n`);\n  }\n\n  public debug(message: string, ...meta: any[]): void {\n    process.stdout.write(`${chalk.green('debug')}: ${message}\\n`);\n  }\n\n  public silly(message: string, ...meta: any[]): void {\n    process.stdout.write(`${chalk.magenta('silly')}: ${message}\\n`);\n  }\n\n\n  public getNamed(name: string): Logger {\n    return this;\n  }\n\n}\n"]}