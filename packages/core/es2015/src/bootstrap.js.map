{"version":3,"file":"bootstrap.js","sourceRoot":"","sources":["../../src/bootstrap.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAA0B;AAC1B,yCAAsC;AACtC,qDAAkD;AAClD,qCAAkC;AAClC,oCAAoC;AAEpC;;;;;;;GAOG;AACH,mBAAmC,IAGlC;;QACC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;QAC7D,MAAM,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,GAAG,CAAC,EAAC,OAAO,EAAE,eAAM,EAAE,WAAW,EAAE,IAAI,+BAAc,EAAE,EAAC,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAS,eAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,uBAAuB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAClC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,wBAAwB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3D,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,+DAA+D,CAAC,CAAC;YAC9E,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;CAAA;AArBD,8BAqBC;AAED;CAIC;AAJD,sCAIC;AAED,MAAM,MAAM,GAAG;;;;;;;;;CASd,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { Injector } from './Injector';\nimport { InternalLogger } from './InternalLogger';\nimport { Logger } from './Logger';\nimport * as emoji from 'node-emoji';\n\n/**\n * Bootstraps a CommandManager, ReadManager, or Saga.\n *\n * @since 1.0.0\n *\n * @param type The type to instantiate\n * @returns {Promise<void>} A promise that resolves once the app is started\n */\nexport async function bootstrap<T>(type: {\n  Type: string;\n  _Instantiate: (injector: Injector) => Bootstrapable\n}): Promise<void> {\n  process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n  const injector = new Injector();\n  injector.set({provide: Logger, useConstant: new InternalLogger()});\n  const logger = injector.get<Logger>(Logger);\n  logger.raw(chalk.green(banner));\n  logger.info(`Launching Eventific ${emoji.get('rocket')}`);\n  logger.info(`Version: ${require('../package.json').version}`);\n  logger.info(`Environment: ${process.env.NODE_ENV} ${emoji.get('eyes')}`);\n  if (type._Instantiate) {\n    logger.info(`Type: ${type.Type}`);\n    const inst = type._Instantiate(injector);\n    logger.info(`Starting application ${emoji.get('dancer')}`);\n    await inst._start();\n  } else {\n    logger.error('The provided type does not seem to be a bootstrap able module');\n    throw new Error('Failed to start');\n  }\n}\n\nexport abstract class Bootstrapable {\n  static Type: string;\n  _Instantiate: (injector: Injector) => Bootstrapable;\n  abstract _start(): Promise<void>;\n}\n\nconst banner = `\n\n  ███████╗██╗   ██╗███████╗███╗   ██╗████████╗██╗███████╗██╗ ██████╗\n  ██╔════╝██║   ██║██╔════╝████╗  ██║╚══██╔══╝██║██╔════╝██║██╔════╝\n  █████╗  ██║   ██║█████╗  ██╔██╗ ██║   ██║   ██║█████╗  ██║██║     \n  ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║╚██╗██║   ██║   ██║██╔══╝  ██║██║     \n  ███████╗ ╚████╔╝ ███████╗██║ ╚████║   ██║   ██║██║     ██║╚██████╗\n  ╚══════╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚═╝╚═╝     ╚═╝ ╚═════╝\n                                                                  \n`;\n"]}