{"version":3,"file":"CommandManager.js","sourceRoot":"","sources":["../../src/CommandManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommandMessage, IAggregate, IStore, Injector, InternalLogger, Logger, IEventHandler, Bootstrapable, ITransport, Store } from '@eventific/core';\nimport * as emoji from 'node-emoji';\nimport chalk from 'chalk';\n\nconst pascalCase = require('pascal-case');\n\nexport interface CommandManagerOptions {\n  extensions?: any[];\n  aggregate: {\n    _InstantiateAggregate(injector: Injector): IAggregate;\n  };\n  store: {\n    _CreateStore(injector: Injector): IStore\n  };\n  transports: Array<{\n    _CreateTransport(injector: Injector): ITransport\n  }>;\n  providers?: any[];\n}\n\nexport abstract class ICommandManager extends Bootstrapable{\n\n}\n\n/**\n *\n * @param {CommandManagerOptions} options\n * @returns T The decorated class\n * @Annotation\n */\nexport function CommandManager(options: CommandManagerOptions) {\n\n  return <T extends {new(...args: any[]): {}}>(Class: T) => {\n    return class extends Class {\n      public static Type = 'CommandManager';\n      public static _Instantiate(parentInjector: Injector): T {\n        const injector = parentInjector.newChildInjector();\n        const store = options.store._CreateStore(injector);\n        injector.set({provide: Store, useConstant: store});\n        injector.set({provide: Logger, useConstant: new InternalLogger(chalk.green(pascalCase('CommandManager')))});\n\n        return new this({\n          injector,\n          store,\n          transports: options.transports.map((t) => t._CreateTransport(injector)) || [],\n          aggregate: options.aggregate._InstantiateAggregate(injector)\n        }) as any;\n      }\n\n      readonly _injector: Injector;\n      readonly _store: IStore;\n      readonly _transports: ITransport[];\n      readonly _aggregate: IAggregate;\n      readonly _logger: Logger;\n\n      constructor(...args: any[]) {\n        super(...args[0].injector.args(Class));\n        const params = args[0];\n        this._injector = params.injector;\n        this._store = params.store;\n        this._transports = params.transports;\n        this._aggregate = params.aggregate;\n        this._logger = this._injector.get<Logger>(Logger);\n      }\n\n      public async _start() {\n        if (this.onInit) {\n          await this.onInit();\n        }\n\n        await this._store.start();\n\n        for (const transport of this._transports) {\n          await transport.start();\n          if(transport.onCommand) {\n            transport.onCommand(async (cmd: any) => {\n              await this._handleCommand(cmd);\n            });\n          }\n        }\n        this._logger.info(`All setup and ready ${emoji.get('sparkles')}`)\n      }\n\n      public async _handleCommand(commandMessage: CommandMessage): Promise<void> {\n        await this._aggregate.handleCommand(commandMessage);\n\n        // const command = await this._aggregate.getCommand(commandMessage);\n        // const stateDef = await this._aggregate.getState(command.aggregateId);\n        // let events: IEvent[];\n        // try {\n        //   events = await command.handle(stateDef.state, stateDef.version);\n        // } catch(ex) {\n        //   this._logger.warn(`Command handler ${command.name} threw an error upon execution`, ex);\n        //   throw ex;\n        // }\n        // if(!events || events.length <= 0) {\n        //   this._logger.error(`Command handler ${command.name} did not return any events. A command has to return at least one event!`);\n        //   throw Error('Internal Server Error');\n        // }\n        // await this._store.applyEvents(this._aggregate.name, events.map((e) => e.toMessage()));\n      }\n\n      public onInit?: () => void;\n\n    };\n  };\n}\n"]}